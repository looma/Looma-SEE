// Updated import script to use port 47017
import { MongoClient, ObjectId } from "mongodb"
import fs from "node:fs/promises"

// Updated to use YOUR actual MongoDB port
const uri = process.env.MONGODB_URI || "mongodb://127.0.0.1:47017/see_exam_system"

function parseArgs() {
  const argv = process.argv.slice(2)
  const out = {}
  for (let i = 0; i < argv.length; i++) {
    const token = argv[i]

    if (token === "--file" || token === "-f") {
      const next = argv[i + 1]
      if (next && !next.startsWith("--") && !next.startsWith("-")) {
        out.file = next
        i++
      } else {
        out.file = true
      }
      continue
    }
    if (token.startsWith("--file=")) {
      out.file = token.slice("--file=".length)
      continue
    }

    if (token === "--url" || token === "-u") {
      const next = argv[i + 1]
      if (next && !next.startsWith("--") && !next.startsWith("-")) {
        out.url = next
        i++
      } else {
        out.url = true
      }
      continue
    }
    if (token.startsWith("--url=")) {
      out.url = token.slice("--url=".length)
      continue
    }

    if (token === "--verbose" || token === "-v") {
      out.verbose = true
      continue
    }
  }
  return out
}

async function readInput({ file, url }) {
  if (file === true) {
    console.warn("‚ö†Ô∏è  --file was provided without a path. Defaulting to ./data/see-2081.json")
    file = "./data/see-2081.json"
  }
  if (url === true) {
    throw new Error("You passed --url without a value. Use: --url https://example.com/file.json")
  }

  if (typeof file === "string" && file.length > 0) {
    const raw = await (await import("node:fs/promises")).readFile(file, "utf8")
    return JSON.parse(raw)
  }
  if (typeof url === "string" && url.length > 0) {
    const res = await fetch(url)
    if (!res.ok) throw new Error(`Failed to fetch URL: ${res.status} ${res.statusText}`)
    return await res.json()
  }
  throw new Error('Provide --file <path> or --file=<path> or --url <https://...>')
}

function normalizeExtendedJSON(value) {
  if (Array.isArray(value)) return value.map(normalizeExtendedJSON)
  if (value && typeof value === "object") {
    if (Object.keys(value).length === 1 && "$date" in value) {
      const d = value["$date"]
      return new Date(d)
    }
    if (Object.keys(value).length === 1 && "$oid" in value) {
      return new ObjectId(value["$oid"])
    }
    const obj = {}
    for (const [k, v] of Object.entries(value)) obj[k] = normalizeExtendedJSON(v)
    return obj
  }
  return value
}

async function main() {
  const args = parseArgs()
  const input = await readInput({ file: args.file, url: args.url })
  if (!Array.isArray(input)) throw new Error("Expected the JSON to be an array of documents.")

  const docs = input.map(normalizeExtendedJSON)
  const practiceDoc = docs.find((d) => d.title && d.subject && typeof d._id === "string")
  const questionsDoc = docs.find((d) => d.testId && d.questions)

  if (!practiceDoc) throw new Error("Missing practice_tests document with string _id.")
  const testId = practiceDoc._id

  if (!questionsDoc) throw new Error("Missing questions document with testId and questions.")
  if (questionsDoc.testId !== testId) {
    console.warn(`questions.testId (${questionsDoc.testId}) != practice_tests._id (${testId}). Normalizing.`)
    questionsDoc.testId = testId
  }
  
  // Remove the _id field from questions document since it's auto-generated by MongoDB
  if ("_id" in questionsDoc) {
    delete questionsDoc._id
  }

  const client = new MongoClient(uri)
  try {
    console.log("Connecting to", uri)
    await client.connect()
    let dbName = "see_exam_system"
    try {
      const u = new URL(uri)
      dbName = u.pathname.replace("/", "") || "see_exam_system"
    } catch {}
    const db = client.db(dbName)

    const practiceTests = db.collection("practice_tests")
    const questions = db.collection("questions")

    const { _id: practiceId, createdAt, updatedAt, ...practiceRest } = practiceDoc

    await practiceTests.updateOne(
      { _id: practiceId },
      {
        $set: { ...practiceRest, updatedAt: new Date() },
        $setOnInsert: { createdAt: createdAt instanceof Date ? createdAt : new Date() },
      },
      { upsert: true },
    )
    console.log(`‚úÖ Upserted practice test: ${practiceId}`)

    await questions.updateOne(
      { testId },
      { $set: { testId, questions: questionsDoc.questions } },
      { upsert: true },
    )
    console.log(`‚úÖ Upserted questions for testId: ${testId}`)
    console.log("üéâ Import finished")
  } finally {
    await client.close()
  }
}

main().catch((e) => {
  console.error("‚ùå Import error:", e)
  process.exit(1)
})
